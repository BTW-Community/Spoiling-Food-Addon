import net.fabricmc.loom.task.RunClientTask
import net.fabricmc.loom.task.RunServerTask
import org.gradle.plugins.ide.idea.model.FilePath
import org.gradle.plugins.ide.idea.model.Module

buildscript {
    dependencies {
        classpath fileTree(dir: "libs", include: "fabric-loom-0.7.local.jar")
    }
}

plugins {
    id 'maven-publish'
    id 'fabric-loom' version "0.7-SNAPSHOT"
    id 'idea'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
    maven {
        name = 'legacy-fabric'
        url = 'https://maven.legacyfabric.net'
    }
    maven {
        url 'https://jitpack.io'
    }
    maven {
        name 'HalfOf2'
        url 'https://storage.googleapis.com/devan-maven/'
    }
    maven {
        url file('mavenRepo')
    }
    maven {
        url = 'https://raw.githubusercontent.com/Devan-Kerman/Devan-Repo/master/'
    }
}

sourceSets {
    btw {
        java {
            srcDirs = ['src/btw/java']
        }
        resources {
            srcDirs = ['src/btw/resources']
        }
    }
}

def lwjglVersion = System.getProperty("os.name").toLowerCase().contains("mac") ? "2.9.1" : "2.9.0"

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    implementation 'org.apache.logging.log4j:log4j-core:2.17.0'
    implementation 'org.apache.logging.log4j:log4j-api:2.17.0'

    implementation "org.lwjgl.lwjgl:lwjgl_util:${lwjglVersion}"
    implementation "org.lwjgl.lwjgl:lwjgl:${lwjglVersion}"
    implementation "org.lwjgl.lwjgl:lwjgl-platform:${lwjglVersion}"

    implementation 'it.unimi.dsi:fastutil:8.5.12'
    modImplementation(group: 'net.devtech', name: 'grossfabrichacks', version: '4.5') {
        exclude group: 'net.fabricmc'
    }

    //include 'it.unimi.dsi:fastutil:8.5.12'
    //include 'net.devtech:grossfabrichacks:6.1'

    implementation fileTree(dir: "libs", include: "**.zip")
    compileOnly fileTree(dir: "$projectDir/BTW_dev", include: "*.zip")
    compileOnly fileTree(dir: "$buildDir/BTW_dev", include: "BTW_dev.jar")
    //implementation fileTree(dir: "$buildDir/BTW_dev", include: "BTW_dev.jar")
    runtimeClasspath fileTree(dir: "$buildDir/BTW_dev", include: "BTW_dev.jar")

    implementation fileTree(dir: "mavenRepo/group/dev/1.0", include: "dev-1.0.jar")

    mappings fileTree(dir: "custom_mappings", include: "**.zip")
    modImplementation("io.github.minecraft-cursed-legacy:cursed-fabric-loader:${loader_version}") {
        transitive false
    }

    /*configurations.getByName("compile").resolvedConfiguration.resolvedArtifacts.each { ResolvedArtifact ra ->
        ModuleVersionIdentifier id = ra.moduleVersion.id
        println id
        runtimeSources "${id.group}:${id.name}:${id.version}:sources"
    }*/
}


configurations {
    btwCompileClasspath.extendsFrom implementation, modImplementation
}

configurations.all {
    resolutionStrategy {
        dependencySubstitution {
            substitute module('org.lwjgl.lwjgl:lwjgl_util:2.9.1-nightly-20130708-debug3') with module("org.lwjgl.lwjgl:lwjgl_util:${lwjglVersion}")
            substitute module('org.lwjgl.lwjgl:lwjgl:2.9.1-nightly-20130708-debug3') with module("org.lwjgl.lwjgl:lwjgl:${lwjglVersion}")
        }
        force "org.lwjgl.lwjgl:lwjgl-platform:${lwjglVersion}"
    }
}
loom {
    // Set accesswidener
    accessWidener = file("src/main/resources/metadataextensionmod.accesswidener")
}

processResources {
    inputs.property "version", project.version
    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

idea {
    module {
        iml {
            whenMerged { Module cp ->
                def entry = cp.dependencies.find { entry -> entry.classes.any {
                    it.file.path.endsWith('dev.jar')
                }}
                // add javadoc jar
                entry.javadoc.add getPathFactory().path("$buildDir/dev_run/dev-javadoc.jar")
            }

            generateTo = file(".idea/modules")
        }
    }
}

openIdea {

}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (JavaVersion.current().isJava9Compatible()) it.options.release = 8
}

java {
    withSourcesJar()
}

compileJava {
    dependsOn('btwJar')
}

task devPackMod(type:Copy) {
    dependsOn('jar')
    from sourceSets.main.output.classesDirs
    into file("$buildDir/classes/java/btw")
}

task devPackBTW(type:Copy) {
    dependsOn('devPackMod')
    dependsOn('btwJar')
}

task devPackRun(type:Jar) {
    dependsOn('devPackBTW')
    from fileTree("$buildDir/classes/java/btw")
    from fileTree("$projectDir/BTW_dev/")
    from sourceSets.btw.output.resourcesDir
    //destinationDirectory = file("$buildDir/dev_run")
    destinationDirectory = file("mavenRepo/group/dev/1.0/")
    archiveFileName = "dev-1.0.jar"
}

jar {
    from sourceSets.main.output.resourcesDir
    from sourceSets.main.output.classesDirs
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}

task btwJar(type:Jar) {
    from fileTree("$projectDir/BTW_dev/")
    from sourceSets.btw.output.resourcesDir
    from sourceSets.btw.output.classesDirs
    destinationDirectory = file("$buildDir/BTW_dev")
    archiveFileName = "BTW_dev.jar"
}

remapJar {
    dependsOn(jar)
    input.set jar.archiveFile.get()
    destinationDirectory = file("$rootDir/release")
}

reobfuscateJar {
    dependsOn(jar)
    input.set jar.archiveFile.get()
    destinationDirectory = file("$rootDir/reobfuscated")
}

task safeRunClient(type:RunClientTask) {
    mustRunAfter('clean')
    dependsOn('clean')
    dependsOn('devPackRun')
}

task safeRunServer(type:RunServerTask) {
    mustRunAfter('clean')
    dependsOn('clean')
    dependsOn('devPackRun')
}

runClient {
    dependsOn('devPackRun')
}

runServer {
    dependsOn('devPackRun')
}

clean.doFirst {
    delete "$buildDir/dev_run"
    delete "$buildDir/BTW_dev"
}
